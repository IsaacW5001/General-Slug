<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-16</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridx = 0;
gridy = 0;

hovernode = noone;
occupant = noone;
nearestplayer = noone;
tempterrain = 0;

selectedactor = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;





chosenplayer = collision_point(x,y,obj_lifeform_parent,true,false);


gridx = floor(x/grid_size);
gridy = floor(y/grid_size);

if( gridx&lt; 0 || gridy &lt; 0 || gridx &gt;= room_width/grid_size || gridy &gt;= room_height/grid_size){
    hovernode = noone;
}else{
    hovernode = map[gridx, gridy];
}


if(mouse_check_button_pressed(mb_left)){
   
    if (global.chosenactor == noone){   
       
                with(chosenplayer){     
                    
                    global.chosenactor = id;
                    persistent = true;
                   
                }
                
        
    }else{
        with (obj_lifeform_parent){
            persistent = false;
        }
        global.chosenactor = noone;
    }
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>temptext = "noone";

draw_self();



if(hovernode != noone){
    temptext = string(gridx) + " / " + string(gridy) + " = ";
    
    if(chosenplayer &gt; -1){
        temptext += chosenplayer.name;
        draw_sprite(spr_selected,-1,chosenplayer.x - 16,chosenplayer.y - 16)
    }else{
        temptext += "noone";
    }
}

    
// draws actors names       
if(global.chosenactor != noone){
      
    draw_set_color(c_white);
    draw_text(view_xview[view_current],view_yview[view_current] + view_hview[view_current]- string_height(global.chosenactor.name),global.chosenactor.name);
    

    }    
   
  
    draw_set_color(c_white);
       
    draw_text(view_xview[view_current] + (view_wview[view_current]- (view_wview[view_current]/3)), view_yview[view_current], temptext);
    
   
    
    
if(collision_point(obj_cursor.x,obj_cursor.y, obj_terrain,true,false)){
        tempterrain = instance_position(x,y,obj_terrain);
   
        temptext = tempterrain.type;
}else{
   
        temptext = "No Terrain"
}
    draw_text(view_xview[view_current] + (view_wview[view_current]- (view_wview[view_current]/3)), view_yview[view_current]+ 20, temptext);

    


if(global.chosenterrain){
    draw_set_color(c_white);
    onterrain = global.chosenterrain
    temptext = onterrain.status;
}else
{

    temptext = "No Global Terrain";


draw_text(view_xview[view_current] + (view_wview[view_current]- (view_wview[view_current]/3)), view_yview[view_current]+ 34,temptext);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
