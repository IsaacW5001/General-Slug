<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// attempt to Turn off auto pixel sizing in GMS need som help- GT
/*

// disable automatic drawing of application surface
    application_surface_draw_enable(false);
// display full screen
     window_set_fullscreen(true);
 
// get moiter size and determine where to place game on screen
     global.monitorw=display_get_width();
     global.monitorh=display_get_height();
     global.xoffset=(global.monitorw-480)/2;
     global.yoffset=(global.monitorh-270)/2;
    if(global.monitorw&gt;=1600 &amp;&amp; global.monitorh&gt;=900)
    then
    {
    // using 3x current screen resolution 480x270
        surface_resize(application_surface,1440,810)
        global.xoffset=(global.monitorw-1440)/2;
        global.yoffset=(global.monitorh-810)/2;
    }
    // draws application surface
    draw_surface_ext(application_surface,global.xoffset,global.yoffset,1,1,0,c_white,1);
*/
phase = "initializing";


tempterrain = 0;
globalvar map;


mapwidth = room_width/grid_size;
mapheight = room_height/grid_size;

// create node

for(xx = 0; xx &lt; mapwidth; xx += 1){
    for(yy = 0; yy &lt; mapheight; yy += 1){
        map[xx, yy] = instance_create(xx * grid_size, yy * grid_size, obj_node);
    }
}

// populate neighbor lists
for(xx = 0; xx &lt; mapwidth; xx += 1){
    for(yy = 0; yy &lt; mapheight; yy += 1){
    
    node = map[xx,yy]; 
    
    //add left neighbor
    if(xx&gt; 0){
    ds_list_add(node.neighbors,map[xx - 1, yy]);
    }
    
    if(xx &lt; mapwidth - 1){
        ds_list_add(node.neighbors,map[xx + 1, yy]);
    }
    // add top neighbor
    
    if(yy &gt; 0){
        ds_list_add(node.neighbors,map[xx, yy - 1]);
    }
        
    if(yy &lt; mapheight - 1){
        ds_list_add(node.neighbors,map[xx,yy + 1]);
        }
        
        if( xx &gt; 0 &amp;&amp; yy &gt; 0) {
            ds_list_add(node.neighbors,map[xx - 1, yy - 1]);
        }
    
        if ( xx &lt; mapwidth - 1 &amp;&amp; yy &gt; 0){
            ds_list_add(node.neighbors, map[ xx + 1, yy - 1]);
        }
        
        if(xx &gt; 0 &amp;&amp; yy &lt; mapheight - 1){
            ds_list_add(node.neighbors,map[xx - 1, yy + 1]);
        }
        
        if (xx &lt; mapwidth - 1 &amp;&amp; yy &lt; mapheight - 1) { 
        
        ds_list_add(node.neighbors, map[xx + 1, yy + 1 ]);
        }
    }
}

instance_create(x, y, obj_cursor);
instance_create(1,1,obj_view);

//TEST STUFF
inventory = false; //Is the inventory open?


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Debug

//Quit with escape because its faster
if(keyboard_check_pressed(vk_escape))
    game_end();
    
if(keyboard_check_pressed(ord('R')))
    game_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
switch(phase){
case "initializing":
 
 
    phase = "ready";
    break;
}

//Inventory test for databases
if(keyboard_check_pressed(ord('A')))
    inv_add(0,0);   //Add an item to the inventory database when we press A
    
if(keyboard_check_pressed(vk_enter))
    inventory = !inventory; //Toggle inventory state on Enter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(inventory)
{
    //Draw mockup inventory for demo purpose
    draw_set_color(c_black);
    draw_rectangle(32,32,room_width - 32,room_height-32,false);
    
    draw_set_color(c_white);
    for(i=0; i&lt;global.__inv_max; i++)   //For each slot in the inventory
    {
        draw_text(48, 48+(16*i), idb_get(inv_get(0,i),0));  //Draw the name of the item in that slot
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
